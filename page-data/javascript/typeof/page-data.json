{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/javascript/typeof/",
    "result": {"data":{"cur":{"id":"7422f945-d7b5-5d28-96a5-28713bda56f1","html":"<h2 id=\"-데이터-타입-확인\" style=\"position:relative;\"><a href=\"#-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%ED%99%95%EC%9D%B8\" aria-label=\" 데이터 타입 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💙 데이터 타입 확인</h2>\n<h3 id=\"1-typeof\" style=\"position:relative;\"><a href=\"#1-typeof\" aria-label=\"1 typeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. typeof()</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//boolean</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span></code></pre></div>\n<p>typeof(데이터)를 통해 데이터의 타입을 확인할 수 있다.<br /></p>\n<p>하지만 null, 객체, 배열은 object 로만 확인이 가능하다.<br />\nobject 의 type 까지 확인하기 위해서는 아래의 메소드를 호출하면 된다.<br /></p>\n<br/>\n<h3 id=\"2-objectprototypetostringcall\" style=\"position:relative;\"><a href=\"#2-objectprototypetostringcall\" aria-label=\"2 objectprototypetostringcall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Object.prototype.toString.call()</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Number]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Boolean]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Undefined]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Null]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Array]</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%ED%99%95%EC%9D%B8\">💙 데이터 타입 확인</a></p>\n<ul>\n<li><a href=\"#1-typeof\">1. typeof()</a></li>\n<li><a href=\"#2-objectprototypetostringcall\">2. Object.prototype.toString.call()</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"💙 데이터 타입 확인 1. typeof() typeof(데이터)를 통해 데이터의 타입을 확인할 수 있다. 하지만 null, 객체, 배열은 object 로만 확인이 가능하다.\nobject 의 type 까지 확인하기 위해서는 아래의 메소드를 호출하면 된다. 2. Object.prototype.toString.call() 💙 데이터 타입 확인 1. typeof() 2. Object.prototype.toString.call()","frontmatter":{"date":"2022.04.03","title":"[JS] 데이터 타입 확인","categories":"JS","author":"안가을","emoji":null},"fields":{"slug":"/javascript/typeof/"}},"next":{"id":"3a2271f2-b236-5b48-b689-f73ecb1a17fb","html":"<h2 id=\"-ecma-script\" style=\"position:relative;\"><a href=\"#-ecma-script\" aria-label=\" ecma script permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💙 ECMA Script</h2>\n<p><strong>ECMA Script</strong> (ES) 란,<br />\nEcma International (자바스크립트 국제 표준화 기구) 이 정의한 <br />\n표준화된 스크립트 프로그래밍 언어를 말한다.<br /></p>\n<p>자바스크립트를 표준화하기 위해서 만들어졌으며<br />\nJavaScript 라고 부르는 프로그래밍 언어의 표준화된 명칭이 바로 ECMA Script 이다.</p>\n<br />\n<p>2015년 6월에 ECMA Script 2015 (ES6) 가 출판되어 크게 변화되었으며,<br />\n이후에는 1년에 한 번씩 버전이 업데이트 되면서 기능들이 추가되고 있다.<br /></p>\n<p>대부분 IE 는 ES5 버전 이하만 지원하며, 비교적 신형 브라우저들은 ES6 버전 이상도 지원하고 있다.</p>\n<br />\n<p>이러한 문제는 ES6 이상의 문법들을 작성한 후에 Babel 을 통해 <br />\n구형 브라우저에서도 동작할 수 있는 ES5 버전 문법으로 변환하여 해결이 가능하다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-ecma-script\">💙 ECMA Script</a></li>\n</ul>\n</div>","frontmatter":{"date":"2022.04.03","title":"[JS] ECMA Script","categories":"JS","author":"안가을","emoji":null},"fields":{"slug":"/javascript/ecma-script/"}},"prev":{"id":"2334b576-3baf-5204-934e-4da1e2104030","html":"<h2 id=\"-변수의-유효범위-variable-scope\" style=\"position:relative;\"><a href=\"#-%EB%B3%80%EC%88%98%EC%9D%98-%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84-variable-scope\" aria-label=\" 변수의 유효범위 variable scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💙 변수의 유효범위 (Variable Scope)</h2>\n<br />\n<h3 id=\"1-블록-레벨-유효범위-block-level-scope\" style=\"position:relative;\"><a href=\"#1-%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8-%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84-block-level-scope\" aria-label=\"1 블록 레벨 유효범위 block level scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 블록 레벨 유효범위 (Block Level Scope)</h3>\n<p>블록 레벨 유효범위를 가지는 변수 키워드에는 <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code> 가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">scope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>const 변수가 선언된 해당 블록 안에 있기 때문에 동작이 가능하다.</p>\n<br />\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">scope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>const 변수가 선언된 해당 블록을 벗어나기 때문에 동작이 불가능하다.<br />\nUncaught ReferenceError: a is not defined at scope 에러가 발생한다.</p>\n<br />\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">scope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>const 변수가 선언된 해당 블록 안에 있기는 하지만,<br />\n변수에 값이 할당된 코드보다 먼저 출력되기 때문에 undefined 출력된다.</p>\n<br />\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">scope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">const</code> 변수가 선언된 해당 블록을 벗어나기 때문에 동작이 불가능하다.<br />\nUncaught ReferenceError: a is not defined at scope 에러가 발생한다.</p>\n<p>위 코드의 const 키워드를 <code class=\"language-text\">let</code> 으로 바꾸어도 결과는 같다.</p>\n<p>let, const 키워드를 사용하는 변수는 블록 레벨의 유효 범위를 가진다.<br />\n변수가 선언되어져 있는 범위의 중괄호 사이의 부분이 블록을 의미한다.</p>\n<br />\n<h3 id=\"2-함수-레벨-유효범위-function-level-scope\" style=\"position:relative;\"><a href=\"#2-%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8-%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84-function-level-scope\" aria-label=\"2 함수 레벨 유효범위 function level scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 함수 레벨 유효범위 (Function Level Scope)</h3>\n<p>함수 레벨 유효범위를 가지는 변수 키워드에는 <code class=\"language-text\">var</code>이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">scope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">var</code> 키워드를 사용하는 변수는<br />\n선언된 함수 범위 안에서는 어디서든 사용할 수 있기 때문에 에러가 발생하지 않는다.<br />\n값이 지정되어져 있지 않다는 undefined 가 출력된다.</p>\n<br />\n<p>의도하지 않은 범위에서 변수가 샤용될 수 있기 때문에<br />\n그만큼 메모리를 차지하고 있고,<br />\n그것이 결국 개발자가 확인하지 못하는 메모리 누수로 발전할 수 있다.</p>\n<p>일반적인 경우에는 var 키워드 보다는 <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code> 를 이용해서 <br />\n블록 레벨의 유효범위를 가지도록 변수를 만들어 주는 것이 관리하기에 효과적이다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EB%B3%80%EC%88%98%EC%9D%98-%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84-variable-scope\">💙 변수의 유효범위 (Variable Scope)</a></p>\n<ul>\n<li><a href=\"#1-%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8-%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84-block-level-scope\">1. 블록 레벨 유효범위 (Block Level Scope)</a></li>\n<li><a href=\"#2-%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8-%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84-function-level-scope\">2. 함수 레벨 유효범위 (Function Level Scope)</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"2022.04.03","title":"[JS] 변수의 유효범위","categories":"JS","author":"안가을","emoji":null},"fields":{"slug":"/javascript/scope/"}},"site":{"siteMetadata":{"siteUrl":"https://autumnly1007.github.io","comments":{"utterances":{"repo":"autumnly1007/autumnly1007.github.io"}}}}},"pageContext":{"slug":"/javascript/typeof/","nextSlug":"/javascript/ecma-script/","prevSlug":"/javascript/scope/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}