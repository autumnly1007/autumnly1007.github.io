{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts",
    "result": {"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"59aa8d0a-3592-59f6-9bfc-15ed60a6f3f6","excerpt":"💙 SEO (검색 엔진 최적화, Search Engine Optimization) 구글이나 네이버 등에 자신의 웹 사이트/페이지를 노출할 수 있도록\n정보를 최적화 하는 작업을 말한다. … 💙 SEO (검색 엔진 최적화, Search Engine Optimization)","fields":{"slug":"/web/seo/"},"frontmatter":{"categories":"WEB","title":"SEO (검색 엔진 최적화)","date":"2022.03.21"}},"next":{"fields":{"slug":"/web/opengraph/"}},"previous":null},{"node":{"id":"74444e5f-85fa-5a0a-81a6-28f3dfe167a4","excerpt":"💙 오픈 그래프 1. 오픈 그래프 (The Open Graph protocol) 웹페이지가 소셜 미디어(카카오톡, 페이스북 등)로 공유될 때 우선적으로 활용되는 정보를 지정할 수 있다. og:type: 페이지의 유형(E.g, website, video.movie) og:site_name: 속한 사이트의 이름 og:title: 페이지의 이름(제목) og:description: 페이지의 간단한 설명 og:image: 페이지의 대표 이미지 주소(URL) og:url: 페이지 주소(URL) 참고: https://ogp.me/ 2. 트위터 카드 (Twitter Cards) 웹페이지가 트위터로 공유될 때 우선적으로 활용되는 정보를 지정할 수 있다. twitter:card: 페이지(카드)의 유형(E.g. summary, player) twitter:site: 속한 사이트의 이름 twitter:title: 페이지의 이름(제목) twitter:description: 페이지의 간단한 설명 twitt…","fields":{"slug":"/web/opengraph/"},"frontmatter":{"categories":"WEB","title":"오픈 그래프","date":"2022.03.21"}},"next":{"fields":{"slug":"/web/favicon/"}},"previous":{"fields":{"slug":"/web/seo/"}}},{"node":{"id":"1868615b-17c6-5f0b-ab0a-ca54b53710a7","excerpt":"favicon favicon 을 따로 지정하지 않으면\n기본적으로 브라우저는\n루트 경로에 있는 favicon.ico 파일을 찾아서\n해당 페이지의 아이콘으로 사용한다. 다른 형식의 이미지 파일을 favicon 으로 사용할 때에는\nlink 태그로 지정해 주어야 한다. .ico 파일 만들기 : https://iconifier.net/ favicon","fields":{"slug":"/web/favicon/"},"frontmatter":{"categories":"WEB","title":"Favicon","date":"2022.03.20"}},"next":{"fields":{"slug":"/javascript/method-chainning/"}},"previous":{"fields":{"slug":"/web/opengraph/"}}},{"node":{"id":"31ddae32-18d1-5ac0-88a0-34bd1d0dc882","excerpt":"💙 메소드 체이닝 (Method Chaning) 메소드를 마치 체인처럼 연결해서 사용하는 것을 의미한다. 💙 메소드 체이닝 (Method Chaning)","fields":{"slug":"/javascript/method-chainning/"},"frontmatter":{"categories":"JS","title":"[JavaScript] 메소드 체이닝","date":"2022.03.20"}},"next":{"fields":{"slug":"/javascript/dom-api/"}},"previous":{"fields":{"slug":"/web/favicon/"}}},{"node":{"id":"2fc011fc-fc34-519e-b44c-8c54ccd0fe74","excerpt":"💙 DOM API 1. DOM API Document Object Model, Application Programming Interface defer: 페이지가 모두 로드된 후에 해당 외부 스크립트가 실행됨을 명시함 2. querySelector & addEventListener 3. classList (add, remove) 4. querySelectorAll & forEach 5. textContent 💙 DOM API 1. DOM API 2. querySelector & addEventListener 3. classList (add, remove) 4. querySelectorAll & forEach 5. textContent","fields":{"slug":"/javascript/dom-api/"},"frontmatter":{"categories":"JS","title":"[JavaScript] DOM API","date":"2022.03.20"}},"next":{"fields":{"slug":"/javascript/object/"}},"previous":{"fields":{"slug":"/javascript/method-chainning/"}}},{"node":{"id":"0c0abb7f-fed3-5a72-b9ec-8f5888127667","excerpt":"💙 객체와 메소드 객체 안에 있는 속성에 함수를 할당한 것은\n속성이 아니라 메소드라고 한다. 💙 객체와 메소드","fields":{"slug":"/javascript/object/"},"frontmatter":{"categories":"JS","title":"[JavaScript] 객체 & 메소드","date":"2022.03.19"}},"next":{"fields":{"slug":"/javascript/function/"}},"previous":{"fields":{"slug":"/javascript/dom-api/"}}},{"node":{"id":"e4dead3f-7718-5882-8af6-62b91e401da1","excerpt":"💙 함수의 선언과 함수의 표현 1. 기명 함수 (이름이 있는 함수) function 키워드를 사용하고,\n이름을 직접적으로 명시하는 것을 함수의 선언이라고 한다. 2. 익명 함수 (이름이 없는 함수) 이름의 명시 없이,\n변수에 할당하여 사용하는 것은 함수의 표현이라고 한다. 💙 함수의 선언과 함수의 표현 1. 기명 함수 (이름이 있는 함수) 2. 익명 함수 (이름이 없는 함수)","fields":{"slug":"/javascript/function/"},"frontmatter":{"categories":"JS","title":"[JavaScript] 함수 선언 & 함수 표현","date":"2022.03.19"}},"next":{"fields":{"slug":"/javascript/parameter/"}},"previous":{"fields":{"slug":"/javascript/object/"}}},{"node":{"id":"a3e9ee8e-60fd-5af4-a1f1-290ab8c4dbd8","excerpt":"💙 매개변수와 인수 1. 매개변수 (Parameters) 함수 안에서 사용하는 데이터를 받아주는 매개체가 되는 변수\n함수 안에서만 사용이 가능 2. 인수 (Arguments) 함수의 매개변수가 받아 줄 특정한 데이터 💙 매개변수와 인수 1. 매개변수 (Parameters) 2. 인수 (Arguments)","fields":{"slug":"/javascript/parameter/"},"frontmatter":{"categories":"JS","title":"[JavaScript] 매개변수 & 인수","date":"2022.03.19"}},"next":{"fields":{"slug":"/javascript/null/"}},"previous":{"fields":{"slug":"/javascript/function/"}}},{"node":{"id":"d58edc14-e973-57a8-8309-51430aabbdb7","excerpt":"💙 null 과 undefined 1.null 어떤 값이 의도적으로 비어있음을 의미한다. 2. undefined 값이 할당되지 않은 상태를 나타낸다. [ null 체크 ]\n체크대상 === null 보다는, 체크대상 == null 로 하는 것이 좋다.\n 는  이기 때문에\n체크대상 == null 로 체크하면 null 과 undefined 를 모두 체크할 수 있기 때문이다. 0 == null == undefined == ‘’ == false 💙 null 과 undefined 1.null 2. undefined","fields":{"slug":"/javascript/null/"},"frontmatter":{"categories":"JS","title":"[JavaScript] Null & Undefined","date":"2022.03.19"}},"next":{"fields":{"slug":"/javascript/variable/"}},"previous":{"fields":{"slug":"/javascript/parameter/"}}},{"node":{"id":"40b003a4-60c7-558e-a64a-211793705fc3","excerpt":"💙 변수와 예약어 1. 변수 (Variable) 데이터를 지정하고 참조(사용)하는 데이터의 이름 var: 사용하지 않는 것이 권장됨 (호이스팅 문제) let: 재할당 가능 const: 재할당 불가능 2. 예약어 (Reserved Word) 특별한 의미를 가지고 있어, 변수나 함수 이름 등으로 사용할 수 없는 단어 if, else, false, true, while, this, break … 💙 변수와 예약어 1. 변수 (Variable) 2. 예약어 (Reserved Word)","fields":{"slug":"/javascript/variable/"},"frontmatter":{"categories":"JS","title":"[JavaScript] 변수 & 예약어","date":"2022.03.19"}},"next":{"fields":{"slug":"/web/notation/"}},"previous":{"fields":{"slug":"/javascript/null/"}}},{"node":{"id":"2279186b-dc5a-5377-9519-c4fa16cb5642","excerpt":"💙 표기법 1.dash-case(kebab-case) 주로 사용 : ,  the-quick-brown-fox-jumps-over-the-lazy-dog 단어들을 하이픈(-)으로 이어서 한 단어로 인식 2. snake_case 주로 사용 : ,  the_quick_brown_fox_jumps_over_the_lazy_dog 단어들을 언더바(_)로 이어서 한 단어로 인식 3. camelCase 주로 사용: javsScript theQuickBrownFoxJumpsOverTheLazyDog 첫 단어의 첫번째 글자는 소문자,\n이어지는 단어들의 첫번째 글자는 대문자 3. PascalCase 주로 사용: javsScript TheQuickBrownFoxJumpsOverTheLazyDog 첫 단어의 첫번째 글자는 대문자,\n이어지는 단어들의 첫번째 글자도 대문자 4. zero-based Numbering 0 기반 번호 매기기\njavaScript 에서는 특수한 경우를 제외하고 0부터 숫자를 시작한…","fields":{"slug":"/web/notation/"},"frontmatter":{"categories":"WEB","title":"표기법","date":"2022.03.19"}},"next":{"fields":{"slug":"/css/transform/"}},"previous":{"fields":{"slug":"/javascript/variable/"}}},{"node":{"id":"8b82a732-d37f-5a26-8acf-468a95880123","excerpt":"💙 변환 1. transform 요소의 변환 효과 2. 2D 변환 함수 (1) translate  / px 단위 사용 translate(x, y): 이동(x축, y축) translateX(x): 이동(x축) translateY(y): 이동(y축) (2) scale  / 없음 (배수 사용) scale(x, y): 크기(x축, y축) scaleX(x): 크기(x축) scaleY(y): 크기(y축) 한쪽 축만 명시하면 찌그러질 수 있기 때문애\n보통은 크기 제어 시 x, y 축을 모두 명시함 (3) rotate  / deg 단위 사용 rotate(degree): 회전(각도) (4) skew  / deg 단위 사용 skew(x, y): 기울임(x축, y축) skewX(x): 기울임(x축) skewY(y): 기울임(y축) (5) matrix matrix(n, n, n, n, n, n): 2차원 변환 효과 matrix는 사용하기가 까다롭지만 직접적으로 사용할 필요가 없다. 앞에서 살펴본 모든 …","fields":{"slug":"/css/transform/"},"frontmatter":{"categories":"CSS","title":"[CSS] 변환 (transform)","date":"2022.03.16"}},"next":{"fields":{"slug":"/css/transition/"}},"previous":{"fields":{"slug":"/web/notation/"}}},{"node":{"id":"768e82a6-6c96-5171-a588-e5b2db503fab","excerpt":"💙 전환 1. transition 요소의 전환(시작과 끝) 효과를 지정하는 단축 속성 2. transition-property 전환 효과를 사용할 속성 이름을 지정 기본값: all - 모든 속성에 적용 속성이름: 전환 효과를 사용할 속성 이름 명시 3. transition-duration 전환 효과의 지속시간을 지정 기본값: 0s - 전환효과 없음 시간: 지속시간(s) 을 지정 4. transition-timing-function 전환 효과의 타이밍(Easing) 함수를 지정 기본값:  - 느리게 - 빠르게 - 느리게 === cubic-bezier(0.25, 0.1, 0.25, 1) : 일정하게 === cubic-bezier(0, 0, 1, 1) : 느리게 - 빠르게 === cubic-bezier(0.42, 0, 1, 1) : 빠르게 - 느리게 === cubic-bezier(0, 0, 0.58, 1) : 느리게 - 빠르게 - 느리게 : 자신만의 값을 정의 (0~1) : n번 분할된…","fields":{"slug":"/css/transition/"},"frontmatter":{"categories":"CSS","title":"[CSS] 전환 (transition)","date":"2022.03.14"}},"next":{"fields":{"slug":"/css/flex-container/"}},"previous":{"fields":{"slug":"/css/transform/"}}},{"node":{"id":"1e19a841-f204-5b16-83b8-047072edbfb4","excerpt":"💙 flex (정렬) display: flex; 가 부여된 요소를 container,\ncontainer 의 자식 요소를 item 이라고 부른다. 또한 flex 는 container, item 에 부여하는 속성들이 각각 나누어져 있다. 1. Flex Container (1) display Flex Container 의 화면 출력(보여짐) 특성 : 블록 요소와 같이 Flex Container 정의 요소가 수직으로 쌓인다. 부모 요소의 크기만큼 width 가 자동으로 늘어난다. 자신이 포함한 콘텐츠의 크기만큼 height 가 자동으로 줄어든다. width, height 가 지정한대로 적용된다. margin, padding 이 정상적으로 적용된다. 자식 요소로 Block, Inline 요소 모두 사용할 수 있다. : 인라인 요소와 같이 Flex Container 정의 요소가 수평으로 쌓인다. 자신이 포함한 콘텐츠의 크기만큼 width, height 가 자동으로 줄어든다. width, he…","fields":{"slug":"/css/flex-container/"},"frontmatter":{"categories":"CSS","title":"[CSS] flex","date":"2022.03.14"}},"next":{"fields":{"slug":"/css/positioning/"}},"previous":{"fields":{"slug":"/css/transition/"}}},{"node":{"id":"d7dd8a85-9597-59d0-935c-ce932c213b88","excerpt":"💙 배치 관련 속성 1. position 요소의 위치 지정 기준 기본값: static - 기준 없음 relative: 요소 자신을 기준으로 함 absolute: 위치 상 부모 요소를 기준으로 함 fixed: 뷰포트(브라우저)를 기준으로 함 sticky: 스크롤 영역을 기준으로 함 2. position 과 같이 사용하는 CSS 속성들 모두 음수 사용 가능 top bottom left right z-index 3. relative 요소 자신을 기준으로 배치한다. relative 라는 특정 기준이 부여되었지만 화면에는 아무런 변화가 없다. 자기 자신을 기준으로 위에서 30px, 왼쪽에서 60px 만큼 이동되어 출력된다. 해당 요소의 기존 위치에는 요소가 차지했던 공간이 그대로 유지되기 때뮨에,\n요소를 원하는 위치에 옮기는 배치의 개념과는 거리가 있다. 실제로 position: relative 를 사용하는 배치는 거의 사용되지 않는다. 4. absolute 위치 상 부모 요소를 기준으로 …","fields":{"slug":"/css/positioning/"},"frontmatter":{"categories":"CSS","title":"[CSS] 배치","date":"2022.03.13"}},"next":{"fields":{"slug":"/css/background/"}},"previous":{"fields":{"slug":"/css/flex-container/"}}},{"node":{"id":"c07a0c1f-c930-5699-b93a-1e27fb5d626b","excerpt":"💙 배경 관련 속성 1. background-color 요소의 배경 색상\n배경 색상은 배경 이미지보다 뒤에 출력됨 기본값: transparent - 투명함 색상: 지정 가능한 색상 2. background-image 요소의 배경 이미지 삽입 기본값: none - 이미지 없음 url(“경로”): 이미지 경로 (따옴표를 붙이는 것이 좋음) 3. background-repeat 요소의 배경 이미지 반복 기본값: repeat - 이미지를 수직, 수평 반복 repeat-x: 이미지를 수평 반복 repeat-y: 이미지를 수직 반복 no-repeat: 반복 없음 4. background-position 요소의 배경 이미지 위치\n보통 방향, 단위로 지정한다. 기본값: 0% 0% - 0% ~ 100% 사이 값 방향: top, bottom, left, right, center 방향 단위: px, em, rem 등 단위로 지정 5. background-size 요소의 배경 이미지 크기 기본값: au…","fields":{"slug":"/css/background/"},"frontmatter":{"categories":"CSS","title":"[CSS] 배경","date":"2022.03.13"}},"next":{"fields":{"slug":"/css/character/"}},"previous":{"fields":{"slug":"/css/positioning/"}}},{"node":{"id":"8d45c0fc-f9c0-5e51-977f-7d5a555edd11","excerpt":"💙 문자 관련 속성 1. color 글자의 색상 기본값: rgb(0, 0, 0) - 검정색 색상: 기타 지정 가능한 색상 2. text-align 문자의 정렬 방식 기본값: left - 왼쪽 정렬 right: 오른쪽 정렬 center: 가운데 정렬 justify: 양쪽 정렬 3. text-decoration 문자의 장식 (선) 기본값: none (장식 없음) underline: 밑줄 overline: 윗줄 line-through: 중앙 선 4. text-indent 문자 첫 줄의 들여쓰기\n음수 사용 가능 (내어쓰기, outdent) 기본값: 0 - 들여쓰기 없음 단위: px, em, rem 등 단위로 지정 💙 문자 관련 속성 1. color 2. text-align 3. text-decoration 4. text-indent","fields":{"slug":"/css/character/"},"frontmatter":{"categories":"CSS","title":"[CSS] 문자","date":"2022.03.13"}},"next":{"fields":{"slug":"/css/font/"}},"previous":{"fields":{"slug":"/css/background/"}}},{"node":{"id":"de691610-2e93-5cd1-95ae-0b3a580204ea","excerpt":"💙 글꼴 (font) 1. font-style 글자의 기울기를 의미한다. 기본값: normal - 기울기 없음 italic: 이텔릭체 (기울어진 글자) 2. font-weight 글자의 두께(가중치)를 의미한다.\n보통 400(일반 두께), 700(두꺼운 두께) 을 많이 사용한다. 기본값: normal, 400 - 기본두께 bold, 700: 두껍게 border: 상위 요소보다 더 두껍게 lighter: 상위 요소보다 더 얇게 100 ~ 900: 100단위의 숫자 9개, normal 과 bold 이외 두께 3. font-size 글자의 크기를 의미한다.\n보통 px, em, rem 등 단위로 지정하여 사용한다. 기본값: 16px - 기본 크기 단위: px, em, rem 등 단위로 지정 %: 부모 요소의 폰트 크기에 대한 비율 smaller: 상위 요소보다 작은 크기 large: 상위 요소보다 큰 크기 xx-small ~ xx-large: 가장 작은 크기~ 가장 큰 크기까지 7단계의 …","fields":{"slug":"/css/font/"},"frontmatter":{"categories":"CSS","title":"[CSS] 글꼴","date":"2022.03.12"}},"next":{"fields":{"slug":"/css/opacity/"}},"previous":{"fields":{"slug":"/css/character/"}}},{"node":{"id":"8301cfba-491d-51ec-a640-f699b2451fb8","excerpt":"💙 투명도 (opacity) 기본값: 1 - 불투명 0~1: 0부터 1 사이의 소수점 숫자 0: 완전한 투명 1: 완전한 불투명 백분율로 나타내자면, 7% 에 해당하는 불투명도로 화면에 요소를 출력한다. \n즉 7% 만큼 불투명하고, 나머지 93% 만큼 투명하게 된다. (화면에 겨우 보이는 정도) 40% 만큼 불투명하고, 60% 만큼 투명하다. 소수점 앞의 정수 0은 생략이 가능하다. 💙 투명도 (opacity)","fields":{"slug":"/css/opacity/"},"frontmatter":{"categories":"CSS","title":"[CSS] 투명도","date":"2022.03.12"}},"next":{"fields":{"slug":"/css/display/"}},"previous":{"fields":{"slug":"/css/font/"}}},{"node":{"id":"18739db8-4cca-5cff-a095-beb1768fe8de","excerpt":"💙 display 요소의 화면 출력(보여짐) 특성을 의미한다. 1. block 상자(레이아웃) 요소를 의미한다.\n각 요소에 이미 지정되어 있는 값이다. 2. inline 글자 요소를 의미한다.\n각 요소에 이미 지정되어 있는 값이다. 3. inline-block 글자 + 상자 요소를 의미한다.\n베이스는 글자 요소 이지만, width, height 가 지정한대로 적용된다.\n각 요소에 이미 지정되어 있는 값이다. 4. flex 플렉스 박스를 의미한다. (1차원 레이아웃)\nx축 또는 y축, 즉 하나의 축만을 가지고 레이아웃을 잡는 개념이다.\n따로 지정해서 사용하는 값이다. 5. grid 그리드를 의미한다. (2차원 레이아웃)\nx축과 y축, 즉 행과 열 두 개의 축을 가지고 레이아웃을 잡는 개념이다.\n따로 지정해서 사용하는 값이다. 6. none 보여짐 특성이 없는 것을 말한다.\n이 값을 지정하면 화면에서 해당 요소가 사라진다.\n사라진다는 것은 요소가 존재하지만 화면에 보여지지 않는다는 것…","fields":{"slug":"/css/display/"},"frontmatter":{"categories":"CSS","title":"[CSS] display","date":"2022.03.12"}},"next":{"fields":{"slug":"/css/overflow/"}},"previous":{"fields":{"slug":"/css/opacity/"}}},{"node":{"id":"e6a6d45a-13ca-5b91-95c6-ffad5a3d03f4","excerpt":"💙 overflow 요소의 크기 이상으로 내용이 넘쳤을 때,\n보여짐을 제어하는 단축 속성을 의미한다. 1. 기본값:  넘친 내용을 그대로 보여준다. 2.  넘친 내용을 잘라낸다. 3.  넘친 내용을 잘라내고, 스크롤바를 생성한다.\nx축, y축 모두 스크롤바를 생성한다. 4.  넘친 내용이 있는 경우에만 잘라내고, 스크롤바를 생성한다. 넘친 내용이 있는 축에만 스크롤바를 생성한다.\n그렇기 때문에 많은 경우에 scroll 보다는 auto 를 사용한다. 5. 개별 속성 요소의 크기 이상으로 내용이 넘쳤을 때,\n보여짐을 제어하는 개별 속성 overflow-x (x축 넘침 제어) overflow-y (y축 넘침 제어) 💙 overflow 1. 기본값:  2.  3.  4.  5. 개별 속성","fields":{"slug":"/css/overflow/"},"frontmatter":{"categories":"CSS","title":"[CSS] overflow","date":"2022.03.10"}},"next":{"fields":{"slug":"/css/box-sizing/"}},"previous":{"fields":{"slug":"/css/display/"}}},{"node":{"id":"8b76012f-c488-5ff3-8214-1304fffa96f0","excerpt":"💙 box-sizing 요소의 크기 계산 기준을 지정하는 것이다. 기본값: - 요소의 내용(content)으로 크기를 계산한다. : 요소의 내용 + padding + border 로 크기를 계산한다. 1. content-box 요소의 (content)으로 크기를 계산한다. padding, border 같이 요소의 크기가 커지는 속성이 적용되었을 때,\n원하는 정확한 수치를 위해서는 width, height 를 수동으로 계산해서 명시해줘야 하는 단점이 있을 수 있다. 1. border-box 요소의  +  +  로 크기를 계산한다. 직접 명시한 width, height 사이즈를 유지하면서,\n내부에 padding, border 가 자동으로 계산되어 들어간다. 따라서 width, height 를 수동으로 계산해서 명시해줘야 하는 불편함을 겪지 않도록 해준다. 💙 box-sizing 1. content-box 1. border-box","fields":{"slug":"/css/box-sizing/"},"frontmatter":{"categories":"CSS","title":"[CSS] box-sizing","date":"2022.03.10"}},"next":{"fields":{"slug":"/css/border-radius/"}},"previous":{"fields":{"slug":"/css/overflow/"}}},{"node":{"id":"3faac376-8d3e-5ab2-aace-1fce4e055fc4","excerpt":"💙 border-radius 요소의 모서리를 둥글게 깎는 것을 의미한다. 기본값:  - 둥글게 없음 단위: px, em, vw 등 단위로 지정 해당 요소의 각 모서리에 반지름이 10px 인 동그라미를(정 원을) 배치한 후,\n요소에서 동그라미를 벗어나는 부분을 삭제하는 원리이다.  -  -  -  의\n시계 방향 순서로 적용할 수 있다. 💙 border-radius","fields":{"slug":"/css/border-radius/"},"frontmatter":{"categories":"CSS","title":"[CSS] border-radius","date":"2022.03.10"}},"next":{"fields":{"slug":"/css/border/"}},"previous":{"fields":{"slug":"/css/box-sizing/"}}},{"node":{"id":"90d0e36d-47f3-549c-bbf9-3f2f5f303861","excerpt":"💙 border 요소의 테두리 선을 지정하는 단축 속성이다.\n테두리 선의 두께가 늘어날수록 요소의 크기가 커진다. 1. border-width 요소 테두리 선의 두께를 의미한다. 기본값:  단위: px, em, % 등 단위로 지정 thin(얇은 두께), thick(두꺼운 두께) 값이 있지만 잘 사용하지 않는다. border 라는 단축 속성의 개별 속성이면서,\n각 방향별로 한번에 적용가능한 단축 속성이다. 2. border-style 요소 테두리 선의 종류를 의미한다. 기본값:  - 선 없음 solid: 실선 (일반 선) dotted: 점선 (… .) dashed: 파선 (- - - -) double: 두 줄 선 groove: 홈이 파여있는 모양 ridge: 솟은 모양 (groove 의 반대) inset: 요소 전체가 들어간 모양 outset: 요소 전체가 나온 모양 3. border-color 요소 테두리 선의 색상을 지정하는 단축 속성을 의미한다. 기본값:  색상: 선의 색상 t…","fields":{"slug":"/css/border/"},"frontmatter":{"categories":"CSS","title":"[CSS] 테두리 선(border)과 색상표현","date":"2022.03.10"}},"next":{"fields":{"slug":"/css/padding/"}},"previous":{"fields":{"slug":"/css/border-radius/"}}},{"node":{"id":"c4c6eccb-0837-5556-a955-d93152424141","excerpt":"💙 padding 1. padding (내부 여백) 요소의 내부 여백(공간)을 지정하는 단축 속성이다.\n여백이 생긴만큼 요소 자체의 크기가 커진다. 기본값:  - 내부 여백 없음 단위: px, em, vw 등 단위로 지정 %: 부모 요소의 가로 너비에 대한 비율로 지정 2. 단축 속성 단축 속성이란, 각 방향을 한 번에 적용해주는 단축키와 같은 속성을 말한다. , , , : 10px , : 10px\n, : 20px : 10px\n: 20px\n: 30px : 10px\n: 20px\n: 30px\n: 40px top 부터 시작해서 시계 방향으로 적용된다. 3. 개별 속성 각 방향마다 하나씩 적용하는 속성을 말한다. 💙 padding 1. padding (내부 여백) 2. 단축 속성 3. 개별 속성","fields":{"slug":"/css/padding/"},"frontmatter":{"categories":"CSS","title":"[CSS] padding","date":"2022.03.10"}},"next":{"fields":{"slug":"/css/margin/"}},"previous":{"fields":{"slug":"/css/border/"}}},{"node":{"id":"7ea61f10-6914-5f32-a85f-e39cf5eec4ce","excerpt":"💙 margin 1. margin (외부 여백) 요소의 외부 여백(공간)을 지정하는 단축 속성이다.\n음수 값도 사용이 가능하다. 기본값:  - 외부 여백 없음 auto: 브라우저가 여백을 계산함\n가로(세로) 너비가 있는 요소의 가운데 정렬에 활용한다. 단위: px, em, vw 등 단위로 지정 2. 단축 속성 단축 속성이란, 각 방향을 한 번에 적용해주는 단축키와 같은 속성을 말한다. , , , : 10px , : 10px\n, : 20px : 10px\n: 20px\n: 30px : 10px\n: 20px\n: 30px\n: 40px top 부터 시작해서 시계 방향으로 적용된다. 3. 개별 속성 각 방향마다 하나씩 적용하는 속성을 말한다. 4. margin 을 이용한 중앙 배치 (정렬 !== 배치) 블럭 요소의 가로 너비가 있는 상태에서 지정하면 수평 가운데 정렬이 된다. 블럭 요소의 세로 너비가 있는 상태에서 지정하면 수직 가운데 정렬이 된다. 위, 아래 위치값을 설정하고 브라우저가 수직…","fields":{"slug":"/css/margin/"},"frontmatter":{"categories":"CSS","title":"[CSS] margin","date":"2022.03.10"}},"next":{"fields":{"slug":"/css/css-unit/"}},"previous":{"fields":{"slug":"/css/padding/"}}},{"node":{"id":"10417cc2-9c4b-55db-9d5e-f8f43263b4a8","excerpt":"💙 CSS 단위 1. px (픽셀) 2. % (상대적 백분율) 3. em 해당 요소의 글꼴 크기가 1em 의 기준이 된다. 상위 요소의 font-size 가 변경되면 1em 의 기준이 바뀔 수 있으므로,\nem 단위는 잘못 사용하면 혼란스러울 수 있다. 4. rem 루트 요소(html)의 글꼴 크기가 1rem 의 기준이 된다. 기본적으로 브라우저는 따로 명시하지 않은 경우 16px 만큼의 글꼴 크기를 가진다. 5. vw 뷰포트 가로 너비의 백분율\nex) 1vw: 뷰포트 가로 너비의 1% 크기 6. vh 뷰포트 세로 너비의 백분율\nex) 10vh: 뷰포트 세로 너비의 10% 크기 💙 CSS 단위 1. px (픽셀) 2. % (상대적 백분율) 3. em 4. rem 5. vw 6. vh","fields":{"slug":"/css/css-unit/"},"frontmatter":{"categories":"CSS","title":"[CSS] 단위","date":"2022.03.09"}},"next":{"fields":{"slug":"/css/width-height/"}},"previous":{"fields":{"slug":"/css/margin/"}}},{"node":{"id":"8060fea8-a5a9-51f1-912c-0185f55f5f8a","excerpt":"💙 너비 (width, height) 요소의 가로/세로 너비를 의미한다. 1. auto 브라우저가 자동으로 너비를 계산한다.\n,  속성의 기본값이다. 2. 단위 , ,  등 단위로 지정한다.\n보통 px 를 가장 많이 사용한다. 3. Inline 요소 (기본값) width: 포함한 콘텐츠의 크기만큼 자동으로 줄어든다. height: 포함한 콘텐츠의 크기만큼 자동으로 줄어든다. 4. Block 요소 (기본값) width: 부모 요소의 크기만큼 자동으로 늘어난다. height: 포함한 콘텐츠의 크기만큼 자동으로 줄어든다. 5. max-width, max-height 요소가 커질 수 있는 최대 가로/세로 너비 기본값:  - 최대 너비 제한이 없다. 단위: px, em, vw 등 단위로 지정한다. 6. min-width, min-height 요소가 작아질 수 있는 최소 가로/세로 너비 기본값:  - 최소 너비 제한이 없다. 단위: px, em, vw 등 단위로 지정한다. 💙 너비 (widt…","fields":{"slug":"/css/width-height/"},"frontmatter":{"categories":"CSS","title":"[CSS] 너비 (width, height)","date":"2022.03.09"}},"next":{"fields":{"slug":"/css/css-properties/"}},"previous":{"fields":{"slug":"/css/css-unit/"}}},{"node":{"id":"042a325e-d1e2-5303-a9c1-1db61d456ef7","excerpt":"💙 속성 (Properties) HTML, CSS, JavaScript 에서의 속성은\n한글로는 같은 단어를 사용하지만, 영어로는 다른 단어를 사용한다. HTML: 속성 (Attributes) CSS: 속성 (Properties) JavaScript: 속성 (Properties) 1. 박스 모델 HTML 요소의 기본적인 모양을 만들어내는 여러가지 속성들을 말한다.\n여러가지 속성들에는 요소의 가로 너비, 세로 너비, 내부 여백, 외부 여백 등이 있으며,\nHTML 의 요소라는 하나의 박스를 제어해주는 속성들을 말한다. 기본적으로 HTML 의 요소는 가로 너비와 세로 너비를 가지고 있는 사각형으로 볼 수 있다. 2. 글꼴, 문자 HTML 의 모든 글자를 CSS 의 글꼴, 문자라는 여러가지 속성들을 이용해서 제어할 수 있다.\n글꼴이란 소위 폰트라고 말하는 서체를 의미한다. 3. 배경 배경에 색상을 적용하거나 이미지를 삽입하여 제어할 수 있다. 4. 배치 특정한 요소를 원하는 위치에 정확하게…","fields":{"slug":"/css/css-properties/"},"frontmatter":{"categories":"CSS","title":"[CSS] 속성","date":"2022.03.09"}},"next":{"fields":{"slug":"/css/selector-priority/"}},"previous":{"fields":{"slug":"/css/width-height/"}}},{"node":{"id":"74d27a26-e046-5d53-b2b5-31474c5803e1","excerpt":"💙 선택자 우선순위 우선순위란, 같은 요소가 여러 선언의 대상이 된 경우,\n어떤 선언의 CSS 속성을 우선적으로 적용할 지 결정하는 방법이다.  점수가 높은 선언의 우선순위가 높다.\n 점수가 같다면, 가장 마지막에 해석된 (나중에 작성된) 선언의 우선순위가 높다. 1. 점수가 높은 선언의 우선순위가 높다. 각 CSS 선택자에 예를 든 점수별로 순위를 매겨보면 아래와 같다.\n(CSS 우선순위의 점수를 계산하는 것을 명시도라고 부른다.)  important (9999999999점)\n Inline style 선언 (1000점)\n ID 선택자 (100점)\n Class 선택자 (10점)\n Tag 선택자 (1점)\n *(전체) 선택자 (0점)\n 상속 => 상속이 가능하지만 별도로 점수를 계산하지 않음 따라서 위의 코드에서는 !important 키워드를 사용한 red 컬러의 색상이 적용된다. [우선순위 점수 계산 예시] Class + Tag + Class\n10 + 1 + 10 = 21 점 Cla…","fields":{"slug":"/css/selector-priority/"},"frontmatter":{"categories":"CSS","title":"[CSS] 선택자 우선순위","date":"2022.03.09"}},"next":{"fields":{"slug":"/css/style-inherit/"}},"previous":{"fields":{"slug":"/css/css-properties/"}}},{"node":{"id":"170a40d5-88ab-5cf7-afcd-f8ac4f226c29","excerpt":"💙 스타일 상속 스타일 상속이란, \n적용된 스타일 내용이 해당하는 요소의 자식요소, 하위요소 까지 적용되는 것을 말한다. 1. 상속되는 CSS 속성들 글자/문자 관련 속성들이 상속된다. (모든 글자/문자 속성은 아님) font-style (글자 기울기) font-weight (글자 두께) font-size (글자 크기) line-height (줄 높이) font-family (폰트(서체)) color (글자 색상) text-align (정렬)\n… 2. 강제 상속 실질적으로 상속이 되지 않는 CSS 내용을 강제적으로 상속시키는 것을 말한다. \ninherit 이라는 값을 사용한다. 💙 스타일 상속 1. 상속되는 CSS 속성들 2. 강제 상속","fields":{"slug":"/css/style-inherit/"},"frontmatter":{"categories":"CSS","title":"[CSS] 스타일 상속","date":"2022.03.09"}},"next":{"fields":{"slug":"/css/attribute-selector/"}},"previous":{"fields":{"slug":"/css/selector-priority/"}}},{"node":{"id":"e38a793f-129b-5177-9654-3f6d8fbd63b4","excerpt":"💙 속성 선택자 (Attribute Selector) 1. [attr] [ABC]\n속성 ABC 를 포함한 요소를 선택한다. 2. [attr=“value”] [ABC=“XYZ”]\n속성 ABC 를 포함하면서 값이 XYZ 인 요소를 선택한다. 💙 속성 선택자 (Attribute Selector) 1. [attr] 2. [attr=“value”]","fields":{"slug":"/css/attribute-selector/"},"frontmatter":{"categories":"CSS","title":"[CSS] 속성 선택자","date":"2022.03.09"}},"next":{"fields":{"slug":"/css/pseudo-elements-selector/"}},"previous":{"fields":{"slug":"/css/style-inherit/"}}},{"node":{"id":"77fc2033-13ee-5da6-8680-50901febfb21","excerpt":"💙 가상 요소 선택자 (Pseudo-Elements) 1. before [ABC::before]\nInline 요소\n선택자 ABC 요소 내부의 앞 부분에 내용을 삽입한다. before 선택자를 사용할 경우, content 는 필수 속성이기 때문에\n만약 내용이 비어있다 하더라도  를 반드시 작성해야 한다. 2. after [ABC::after]\nInline 요소\n선택자 ABC 요소 내부의 뒷 부분에 내용을 삽입한다. 마찬가지로 after 선택자를 사용할 경우, content 는 필수 속성이기 때문에\n만약 내용이 비어있다 하더라도  를 반드시 작성해야 한다. 💙 가상 요소 선택자 (Pseudo-Elements) 1. before 2. after","fields":{"slug":"/css/pseudo-elements-selector/"},"frontmatter":{"categories":"CSS","title":"[CSS] 가상 요소 선택자","date":"2022.03.09"}},"next":{"fields":{"slug":"/css/pseudo-class-selector/"}},"previous":{"fields":{"slug":"/css/attribute-selector/"}}},{"node":{"id":"1fe4971a-ebdc-5071-9edf-17437e638888","excerpt":"💙 가상 클래스 선택자 (Pseudo-Classes) 1. hover [ABC: hover]\n선택자 ABC 의 요소에 마우스 커서가 올라가 있는 동안을 선택한다. 2. active [ABC: active]\n선택자 ABC 의 요소에 마우스를 클릭하고 있는 동안을 선택한다. 3. focus [ABC: focus]\n선택자 ABC 요소가 포커스되면 선택한다. 포커스가 가능한 요소들: input, select, textarea 등 포커스가 가능하지 않은 요소들을 포커스가 가능한 형태로 만드는 방법 tabindex 속성을 통해 Focus 가 될 수 있는 요소를 만들 수 있다.\nTab 키를 사용해 Focus 할 수 있는 순서를 지정하는 속성이다.\n순서로 (값으로) -1 이 아닌 다른 값을 넣는 것은 논리적 흐름을 방해하기 때문에 권장되지 않는다.\n(포커스는 한 페이지에서 하나의 요소만 가능하다.) 4. first child [ABC:first-child]\n선택자 ABC 가 형제 요소 중에서 첫…","fields":{"slug":"/css/pseudo-class-selector/"},"frontmatter":{"categories":"CSS","title":"[CSS] 가상 클래스 선택자","date":"2022.03.09"}},"next":{"fields":{"slug":"/css/css-selector/"}},"previous":{"fields":{"slug":"/css/pseudo-elements-selector/"}}},{"node":{"id":"88074ba3-b796-5802-94fa-8517adf6d7cb","excerpt":"💙 CSS 선택자 1. 전체선택자 (Universal Selector) 모든 요소를 선택한다. 2. 태그 선택자 (Type Selector) 태그 이름으로 요소를 선택한다. 3. 클래스 선택자 (Class Selector) HTML class 속성의 값으로 요소를 선택한다. 4. 아이디 선택자 (ID Selector) HTML id 속성의 값으로 요소를 선택한다. 5. 일치 선택자 (Basic Combinator) [ABCXYZ]\n선택자 ABC 와 XYZ 를 동시에 만족하는 요소를 선택한다. 6. 자식 선택자 (Child Combinator) [ABC > XYZ]\n선택자 ABC 의 자식 요소인 XYZ 를 선택한다. 7. 하위 선택자 (Descendant Combinator) [ABC XYZ]\n선택자 ABC 의 하위 요소인 XYZ 를 선택한다.\n‘띄어쓰기’ 가 선택자의 기호이다. 8. 인접 형제 선택자 (Adjacent Sibling Combinator) [ABC + XYZ]\n선택자…","fields":{"slug":"/css/css-selector/"},"frontmatter":{"categories":"CSS","title":"[CSS] 선택자","date":"2022.03.09"}},"next":{"fields":{"slug":"/css/add-style/"}},"previous":{"fields":{"slug":"/css/pseudo-class-selector/"}}},{"node":{"id":"6b5085d4-14b5-5cd6-8be6-87984f9f823a","excerpt":"💙 style 의 선언 방식 네가지 1. 내장 방식 <style></style> 의 내용으로 스타일을 작성하는 방식이다. 2. 인라인 방식 요소의 style 속성에 직접 스타일을 작성하는 방식이다. (선택자 없음)\n우선순위가 높아 유지보수에 악영향을 미치므로 사용이 권장되지 않는다. 3. 링크 방식 <link /> 로 외부 CSS 문서를 가져와서 연결하는 방식이다. (병렬 연결방식) 4. @import 방식 CSS의 @import 규칙으로 CSS 문서 안에서\n또 다른 CSS 문서를 가져와 연결하는 방식이다. (직렬 연결방식) 💙 style 의 선언 방식 네가지 1. 내장 방식 2. 인라인 방식 3. 링크 방식 4. @import 방식","fields":{"slug":"/css/add-style/"},"frontmatter":{"categories":"CSS","title":"[CSS] 스타일 선언 방식","date":"2022.03.09"}},"next":{"fields":{"slug":"/web/global-attribute/"}},"previous":{"fields":{"slug":"/css/css-selector/"}}},{"node":{"id":"5adf85a5-13e7-55c6-b48d-9707e4a8d31f","excerpt":"💙 전역 속성 HTML 에서 속성이란\n열리는 태그에 작성하는 href, target, src 같은 HTML 의 기능을 확장해주는 개념이다. 기본적으로 요소들은 자신이 사용할 수 있는 속성이 정해져 있다. (img태그: src, a태그: href 등)\n하지만 전역 속성은 body 에서 사용하는 태그들의 전체 영역에서 언제든지 사용할 수 있다. 1.title 요소의 정보나 설명을 지정한다.\n해당 요소에 마우스를 올리면 일종의 tooltip 처럼 title 속성이 출력된다. 2. style 요소에 적용할 스타일을 지정한다. 3. class 요소를 지칭하는 중복 가능한 이름이다.\ncss, js 에서 해당 요소를 제어하기 위해서 사용한다. 4. id 요소를 지칭하는 중복이 불가능한 고유한 이름이다.\n자주 사용하지는 않지만, 중요한 위치에 이름을 부여할 때에는 id 를 사용하는 것이 효율적이다.\n해당하는 요소를 빠르게 찾아서 제어할 수 있기 때문이다. 5. data <div data-이름=“…","fields":{"slug":"/web/global-attribute/"},"frontmatter":{"categories":"WEB","title":"전역 속성","date":"2022.03.09"}},"next":{"fields":{"slug":"/web/element/"}},"previous":{"fields":{"slug":"/css/add-style/"}}},{"node":{"id":"0ed462f2-24fe-5a5f-a950-e0b16475116f","excerpt":"💙 여러가지 HTML 요소들 1. div Block 요소\n특별한 의미가 없는 구분을 위한 요소 (Division) 2. h1 Block 요소\n제목을 의미하는 요소 (Heading) 중요도를 숫자로 명시하여 사용하며 (h1 ~ h6)\n숫자가 작을수록 더 중요한 제목을 의미한다. 3. p Block 요소\n문장을 의미하는 요소 (Paragraph) 4. img Inline 요소\n이미지를 삽입하는 요소 (Image) src: 삽입할 이미지의 경로 (필수 속성) alt: 삽입할 이미지의 이름 (필수 속성) / 대체 텍스트 5. ul / li (1) ul Block 요소 순서가 필요없는 목록의 집함을 의미한다. (Unordered List) (2) li Block 요소 목록 내의 각 항목을 의미한다. (List Item) 6. a Inline 요소\n다른/같은 페이지로 이동하는 하이퍼링크를 지정하는 요소 (Anchor: 닻) href: 링크 URL (Hypertext Reference) tar…","fields":{"slug":"/web/element/"},"frontmatter":{"categories":"WEB","title":"HTML Elements","date":"2022.03.08"}},"next":{"fields":{"slug":"/css/inline-block/"}},"previous":{"fields":{"slug":"/web/global-attribute/"}}},{"node":{"id":"dbb04e73-bfe0-5132-ba74-076efd2f1a1c","excerpt":"💙 글자와 상자 우리가 보는 웹사이트는 이미지를 제외하고 모두 글자와 상자로 이루어져 있다고 볼 수 있다.\n요소가 화면에 출력되는 특성은 크게 2가지로 구분된다. 1. Inline 요소 글자를 만들기 위한 요소들을 말한다.\n대표적으로 span 태그가 있다. 요소가 수평으로 쌓인다. 자신이 포함한 콘텐츠의 크기만큼 width, height 가 자동으로 줄어든다. width, height 를 지정해도 무시된다. margin(요소의 외부여백), padding(요소의 내부여백)의\n왼쪽/오른쪽 여백은 적용이 되지만, 위/아래 여백은 정상적으로 적용되지 않는다. 자식 요소로 Block 요소를 사용할 수 없다. 2. Block 요소 상자(레이아웃) 을 만들기 위한 요소들을 말한다.\n대표적으로 div 태그가 있다. 요소가 수직으로 쌓인다. 부모 요소의 크기만큼 width 가 자동으로 늘어난다. 자신이 포함한 콘텐츠의 크기만큼 height 가 자동으로 줄어든다. width, height 가 지정한…","fields":{"slug":"/css/inline-block/"},"frontmatter":{"categories":"CSS","title":"[CSS] Inline 요소와 Block 요소","date":"2022.03.08"}},"next":{"fields":{"slug":"/web/empty-tag/"}},"previous":{"fields":{"slug":"/web/element/"}}},{"node":{"id":"c0ec61b0-2321-53dd-9dcd-62b09b15345c","excerpt":"💙 빈 태그 (Empty Tag) <tag></tag> 형태가 아니라,\n<tag> 처럼 열리는 태그만 있고 닫히는 태그가 없는 것을 말한다.\n안에 내용을 담을 수 없는 구조이기 때문에 빈 태그라고 부른다. 빈 태그를 작성하는 방법에는 두 가지가 있다. 1. <tag> HTML 1/2/3/4/5\n작성하기에 편리함\n열리는 태그와 헷갈릴 수 있음 2. <tag /> XHTML / HTML5\n비교적 안전함\n빈 태그라는 것을 알기 쉬움 예: , ,  … 슬래시를 작성하지 않으면, 열리는 태그와 헷갈려서 닫히는 태그를 찾느라 시간을 낭비할 수도 있다.\n빈 태그를 사용할 경우에는 되도록이면 슬래시를 붙여서 사용하는 것이 좋겠다! 💙 빈 태그 (Empty Tag) 1. <tag> 2. <tag />","fields":{"slug":"/web/empty-tag/"},"frontmatter":{"categories":"WEB","title":"빈 태그 (Empty Tag)","date":"2022.03.08"}},"next":{"fields":{"slug":"/web/element-relationship/"}},"previous":{"fields":{"slug":"/css/inline-block/"}}},{"node":{"id":"983dc93b-315d-57b3-8df2-30f85ff5764c","excerpt":"💙 Element 간의 관계 1. 부모 요소와 자식 요소 기준이 되는 요소를 ‘나’ 라고 표현하여 설명해보자면, 부모요소: 나를 감싸고 있는 바로 윗 단계에 있는 요소 자식요소: 내가 감싸고 있는 바로 아래 단계에 있는 요소 2. 상위 요소와 하위 요소 상위요소: 나를 감싸고 있는 모든 요소 하위요소: 내가 감싸고 있는 모든 요소 💙 Element 간의 관계 1. 부모 요소와 자식 요소 2. 상위 요소와 하위 요소","fields":{"slug":"/web/element-relationship/"},"frontmatter":{"categories":"WEB","title":"Element 간의 관계","date":"2022.03.08"}},"next":{"fields":{"slug":"/web/emmet/"}},"previous":{"fields":{"slug":"/web/empty-tag/"}}},{"node":{"id":"47ce1b77-a937-595f-824b-a4dd503ec158","excerpt":"💙 Emmet Emmet(에밋)은 HTML, XML 등의 문서를 편집할 때\n더욱 빠르게 코딩하기 위해서 사용되는 플러그인이다. 간단하게 태그 이름만 명시하고 탭키를 눌러서 요소를 자동으로 완성하는 것은,\n이 emmet 이라는 기능의 도움을 받고 있는 것이다. 예를 들어, div 까지만 작성하고 탭 키를 누르면 완전한 div 태그가 작성된다. 또는\ndiv.box 까지만 작성하고 탭 키를 누르게 되면 클래스 속성까지 빠르게 작성할 수 있다. 이것은 css 에서도 동일하게 적용이 가능하다.\n예를 들어 w:200, bc:orange 을 각각 작성하고 탭 키를 누르면 으로 작성할 수 있다. 이처럼 emmet 문법은 html, css 에 적용이 가능하다. 특히 html 에서 작성하는 emmet 문법은, css 선택자를 활용해서 사용할 수 있기 때문에\n아래처럼 더욱 복잡한 구조의 emmet 을 사용할 수 있다. 예: div>ul>li*4{$} 💙 Emmet","fields":{"slug":"/web/emmet/"},"frontmatter":{"categories":"WEB","title":"Emmet 을 이용해 태그 작성하기","date":"2022.03.08"}},"next":{"fields":{"slug":"/web/browser-style-reset/"}},"previous":{"fields":{"slug":"/web/element-relationship/"}}},{"node":{"id":"db75db46-0c5d-52ea-958b-373e3d20ee66","excerpt":"💙 브라우저 스타일 초기화 기본적으로 HTML 요소들은 브라우저가 정해 놓은 CSS 스타일을 사용하게 된다.\n이 스타일은 브라우저 별로 유사하긴 하지만 조금씩 다른 값들을 가지고 있다.\n그렇기 때문에 프로젝트를 시작하기 전에\n브라우저에서 기본적으로 제공하는 CSS 스타일을 초기화 하는 것이 좋다. https://www.jsdelivr.com/package/npm/reset-css\n상단의 페이지로 접속해서 reset.min.css 파일을 HTML copy 해서 head 태그 안에 작성해주면 된다. 여기서 주의할 점은, 추가적으로 연결할 css 파일은 \n반드시 스타일 초기화 css 보다 아래에서 작성되어야 한다는 것이다.\ncss link 는 작성한 순서대로 동작하기 때문에,\n위의 예제처럼 작성한다면 스타일 초기화 css 가 가장 먼저 적용된다. min (Minify) 파일명.min.확장자와 같이 min 키워드는 파일이 난독화나 경량화 되었다는 것을 의미한다.\n즉 원본 파일을 용량이 가…","fields":{"slug":"/web/browser-style-reset/"},"frontmatter":{"categories":"WEB","title":"브라우저 스타일 초기화하기","date":"2022.03.08"}},"next":{"fields":{"slug":"/web/tab-size/"}},"previous":{"fields":{"slug":"/web/emmet/"}}},{"node":{"id":"e2dfc37e-ed8b-596e-8bae-98f1332f0ff6","excerpt":"💙 탭 사이즈 변경하기 탭 한개에 해당하는 공백의 수를 설정하는 방법이다.\n기본은 4로 되어있지만, 코드가 복잡해지고 길어질수록\n한 번에 볼수 있는 코드가 적어지기 때문에\n가독성을 위해 2로 바꾸어서 사용하는 것이 좋다! 1. vscode 실행 2. Settings 열기 (커맨드 + ,) 3. Users, Workspace 중에서 Users 클릭 (모든 프로젝트에 적용) 4. 검색창에 tab size 입력 5. Editor: Tab Size 설정을 2로 변경 💙 탭 사이즈 변경하기 1. vscode 실행 2. Settings 열기 (커맨드 + ,) 3. Users, Workspace 중에서 Users 클릭 (모든 프로젝트에 적용) 4. 검색창에 tab size 입력 5. Editor: Tab Size 설정을 2로 변경","fields":{"slug":"/web/tab-size/"},"frontmatter":{"categories":"TOOL","title":"[vscode] 탭 사이즈 변경하기","date":"2022.03.07"}},"next":{"fields":{"slug":"/web/index-html/"}},"previous":{"fields":{"slug":"/web/browser-style-reset/"}}},{"node":{"id":"be4619c0-198b-5e82-8048-c4f4225621a3","excerpt":"💙 index.html about - index.html\nmain.html 현재 프로젝트 디렉토리 구조가 위처럼 되어있는 경우\nmain.html 에서 a 태그를 클릭하면! 주소창에는 아래와 같이 표시되고 해당 디렉토리로 이동하게 된다.\n 하지만 about 폴더로 이동만 하는 것이 아니라,\nabout 폴더 안에 있는 index.html 파일을 출력하게 된다. 이러한 동작이 가능한 이유는,\n웹 브라우저는 디폴트로 index.html 라는 이름을 가진 파일을 우선적으로 읽어들이도록 되어있기 때문에\nindex.html 파일이 들어있는 폴더의 위치만 정확하게 명시해주면\n해당 파일을 찾아서 출력하기 위해 시도하기 때문이다. 💙 index.html","fields":{"slug":"/web/index-html/"},"frontmatter":{"categories":"WEB","title":"index.html","date":"2022.03.07"}},"next":{"fields":{"slug":"/web/path/"}},"previous":{"fields":{"slug":"/web/tab-size/"}}},{"node":{"id":"c6b51338-95c1-51ee-8316-288d586a6693","excerpt":"💙 상대 경로와 절대 경로 1. 상대 경로 (1) ./ 현재 경로를 의미한다.\n생략이 가능하다. (2) ../ 현재 경로에서 상위에 있는 디렉토리를 의미한다. 2. 절대 경로 (1) http (https) ~ 원격의 다른 사이트 주소를 의미한다. (2) / (//) 최상위의 루트 경로를 의미한다. 상황에 따라서 상대 경로가 효율적일 수도 있고, 절대 경로가 효율적일 수도 있기 때문에\n현재 주어진 상황에 알맞게 사용해야 한다. 💙 상대 경로와 절대 경로 1. 상대 경로 (1) ./ (2) ../ 2. 절대 경로 (1) http (https) ~ (2) / (//)","fields":{"slug":"/web/path/"},"frontmatter":{"categories":"WEB","title":"상대 경로 vs 절대 경로","date":"2022.03.07"}},"next":{"fields":{"slug":"/web/alt/"}},"previous":{"fields":{"slug":"/web/index-html/"}}},{"node":{"id":"af4ece8c-fdb0-54f2-9ec2-669c0ba217a4","excerpt":"💙 alt Alternate 의 약어. 이미지가 출력되지 못하는 경우 대신 출력할 텍스트라고 해서 대체 텍스트 라고 부른다.\n이미지 경로가 잘못되거나 네트워크가 불안정하거나 등등 이미지를 출력할 수 없는 다양한 상황에서\n이미지 대신 화면에 보여질 글자를 말한다. img 태그를 작성할 경우 반드시 작성해야 할 필수 속성이다. 💙 alt","fields":{"slug":"/web/alt/"},"frontmatter":{"categories":"WEB","title":"img 태그의 alt 속성","date":"2022.03.07"}},"next":{"fields":{"slug":"/web/tags-in-head/"}},"previous":{"fields":{"slug":"/web/path/"}}},{"node":{"id":"4986279b-a757-5770-8777-b7948fa6771e","excerpt":"💙 정보를 의미하는 태그 1. <title></title> HTML 문서의 제목을 정의하는 태그\n웹 브라우저의 탭에 정의한 제목이 표시된다. 2. <link> 외부 문서를 가져와 연결할 때 사용한다. (대부분 CSS 파일) rel: 가져올 외부 문서와 현재 HTML 간의 관계를 명시한다. (필수 속성) href: 가져올 문서의 경로 favicon (파비콘) 은 Favorite Icon 의 줄임말이다.\n주로 favicon.ico, favicon.png 파일이 사용된다. 3. <style></style> 스타일(CSS) 를 HTML 문서 안에서 작성하는 경우에 사용한다. 4. <script></script> 자바스크립트 파일을 외부에서 가져오거나\nHTML 문서 안에서 작성하는 경우에 사용한다. scr: source 의 약어. 사용할 소스 코드(파일)를 지정하는 HTML 속성 5. <meta> 앞에서 살펴본 태그들로는 표시할 수 없는\nHTML 문서(웹 페이지)의 제작자, 내용, 키워드 …","fields":{"slug":"/web/tags-in-head/"},"frontmatter":{"categories":"WEB","title":"정보를 의미하는 태그 (title, link, style, script, meta)","date":"2022.03.07"}},"next":{"fields":{"slug":"/web/html-head-body/"}},"previous":{"fields":{"slug":"/web/alt/"}}},{"node":{"id":"672d32e5-6431-5dc1-8938-d9f961558c37","excerpt":"💙 html, head, body 1. <html></html> 문서의 전체 범위\nHTML 문서가 어디에서 시작하고, 어디에서 끝나는지 브라우저에게 알려주는 역할을 한다. <html lang=“ko”>\nlang(language 단어의 약어)은 지정할 문서의 언어(ISO 639-1)를 명시하는 HTML 속성이다.\n지정 가능한 언어 목록 : https://ko.wikipedia.org/wiki/ISO_639-1_코드_목록\n다른 나라의 언어로 설정 시, 구글 크롬에서는 페이지 번역을 할 것인지 자동으로 물어보게 된다. 2. <head></head> 문서의 정보를 나타내는 범위\n웹 브라우저가 해석해야 할 웹 페이지의 제목, 설명, 사용할 파일 위치, 스타일(CSS) 같은\n웹 페이지의 보이지 않는 정보를 작성하는 범위이다. 3. <body></body> 문서의 구조를 나타내는 범위\n사용자 화면을 통해 보여지는 로고, 헤더, 푸터, 내비게이션, 메뉴, 버튼, 이미지 같은\n웹 페이지의 보여지는…","fields":{"slug":"/web/html-head-body/"},"frontmatter":{"categories":"WEB","title":"html, head, body","date":"2022.03.07"}},"next":{"fields":{"slug":"/web/doctype/"}},"previous":{"fields":{"slug":"/web/tags-in-head/"}}},{"node":{"id":"9f9a6daf-2b19-5a55-8a19-63fa44fd8421","excerpt":"💙 DOCTYPE <!DOCTYPE html> 문서의 HTML 버전을 지정하는 부분이다.\n<!DOCTYPE html> 은 가장 최신의 표준인 HTML5 를 의미한다.\nHTML 파일이 현재 웹 표준에 알맞게 실행되도록 명시하는 것이다. DOCTYPE (DTD, Document Type Definition)\n마크업 언어에서 문서 형식을 정의하며,\n웹 브라우저가 어떤 HTML 버전의 해석 방식으로\n페이지를 이해하면 되는지를 알려주는 용도 버전: HTML1 - HTML2 - HTML3 - HTML4 - XHTML - HTML5 (현재 표준) 이전 버전을 직접 명시할 일은 사실상 없다.\n간혹 <!DOCTYPE html PUBLIC ”-//W3C//DTD XHTML 1.0 Trans …“>\n라고 명시되어져 있는 경우, XHTML 버전이라고 생각하면 된다. 💙 DOCTYPE <!DOCTYPE html>","fields":{"slug":"/web/doctype/"},"frontmatter":{"categories":"WEB","title":"DOCTYPE","date":"2022.03.07"}},"next":{"fields":{"slug":"/web/open-source-license/"}},"previous":{"fields":{"slug":"/web/html-head-body/"}}},{"node":{"id":"5c0bfc73-6e65-5d1d-88ac-bea0e9e2338f","excerpt":"💙 오픈소스 라이선스 오픈소스란 어떤 제품을 개발하는 과정에 필요한 소스 코드나 설계도를\n누구나 접근해서 열람할 수 있도록 공개하는 것을 말한다. 1. Apache License 아파치 소프트웨어 재단에서 자체 소프트웨어에 적용하기 위해 만든 라이선스\n개인적/상업적 이용, 배포, 수정, 특허 신청이 가능하다. 2. MIT License 매사추세츠 공과대학 (MIT) 에서 소프트웨어 학생들을 위해 개발한 라이선스\n개인 소스에 이 라이선스를 사용하고 있다는 표시만 지켜주면 되며\n나머지 사용에 대한 제약은 없다. 대부분 프로젝트에서는 자동으로 오픈소스가 같이 빌드되기 때문에 따로 관리할 필요는 없음 3. BSD License 버클리 캘리포니아 대학에서 개발한 라이선스\nMIT 와 동일한 조건 4. Beerware 오픈소스 개발자에게 맥주를 사줘야 하는 라이선스\n물론 만날 수 있는 경우…! 오픈소스에는 저작권이 있고 그 저작권에도 다양한 종류가 있지만, 앞서 소개한 오픈소스들은 결론적으로 …","fields":{"slug":"/web/open-source-license/"},"frontmatter":{"categories":"WEB","title":"오픈소스 라이선스","date":"2022.03.07"}},"next":{"fields":{"slug":"/web/special-characters/"}},"previous":{"fields":{"slug":"/web/doctype/"}}},{"node":{"id":"52284dfa-2cdf-544f-a64f-9f503688723d","excerpt":"💙 특수 문자의 영어/한글 이름 1. ` Backtick(백틱), Grave(그레이브)\n\nJavaScript 에서 자주 사용 2. ~ Tilde (틸드, 물결표시) 3. ! Exclamation mark (엑스클러메이션, 느낌표) 4. @ At sign (앳, 골뱅이) 5. # Sharp, Number sign (샵, 넘버, 우물 정) 6. $ Dollar sign (달러) 7. % Percent sign (퍼센트) 8. ^ Caret (캐럿) 9. & Ampersand (엠퍼센드)\n엠퍼센트 아님 10. * Asterisk (에스터리스크, 별표) 11. - Hyphen, Dash (하이픈, 대시, 마이너스) 12. _ Underscore, Low dash (언더스코어, 로우 대시, 밑줄) 13. = Equals sign (이퀄, 동등) 14. ” Quotation mark (쿼테이션, 큰 따옴표) 15. ’ Apostrophe (아포스트로피, 작은 따옴표) 16. : Colon (…","fields":{"slug":"/web/special-characters/"},"frontmatter":{"categories":"WEB","title":"특수 문자 용어","date":"2022.03.07"}},"next":{"fields":{"slug":"/web/web-image/"}},"previous":{"fields":{"slug":"/web/open-source-license/"}}},{"node":{"id":"e7683e76-36df-5aa2-b89d-f2cb4aec20b9","excerpt":"💙 웹 이미지 웹에서 사용할 수 있는 이미지라는 개념은 크게 비트맵과 벡터로 나뉘게 된다. 1. 비트맵 (Bitmap) 각각의 픽셀이 모여 만들어진 정보의 집합\n레스터(Raster) 이미지 라고도 부름 일반적인 사진, 그림은 비트맵이 훨씬 더 사용하기에 효과적임 장점: 정교하고 다양한 색상을 자연스럽게 표현할 수 있음 단점: 확대/축소 시 계단 현상이 나타나고 품질이 저하됨    (1). JPG (JPEG) Full-Color 와 Gray-scale 의 압축을 위해 만들어졌으며,\n압축률이 훌륭해 사진이나 예술 분야에서 많이 사용함 손실 압축: 이미지의 픽셀이 손실되면서 압축되기 때문에 용량이 획기적으로 줄어들 수 있음  표현 색상도(24비트, 약 1600만 색상)가 뛰어남 이미지의 품질과 용량을 쉽게 조절 가능 가장 널리 쓰이는 이미지 포맷 (2). PNG Gif 의 대체 포맷으로 개발됨 비손실 압축: 이미지가 손실되지 않으면서 압축되기 때문에 용량이 비교적 클 수 있음 8비트(2…","fields":{"slug":"/web/web-image/"},"frontmatter":{"categories":"WEB","title":"웹 이미지","date":"2022.03.07"}},"next":{"fields":{"slug":"/web/web-standards-and-browser/"}},"previous":{"fields":{"slug":"/web/special-characters/"}}},{"node":{"id":"754e9fac-f4b7-5d49-8e3c-f4a76653fa85","excerpt":"💙 웹 표준 (Web Standard) 웹 표준이란 웹에서 사용되는 표준 기술이나 규칙을 의미한다.\nW3C 의 표준화 제정 단계의 권고안(REC) 에 해당하는 기술이다. W3C 의 표준화 제정 단계는 크게 다음과 같이 4가지 단계를 가진다. 초안 (Working Draft, WD) 후보권고안 (Candidate Recommendation, CR) 제안권고안 (Proposed Recommendation, PR) 권고안 (W3C Recommendation, REC) 구글, 마이크로소프트, 애플 같은 브라우저 공급업체 (Browser Vendors) 에서는\n제정된 웹표준을 근거로 해서 브라우저를 만든다. 브라우저 공급업체가 각각 다르기 때문에\n브라우저에서 동작하는 내용들도 일부가 다를 수 있다. 💙 크로스 브라우징 (Cross Browsing) 조금은 다르게 구동되는 여러 브라우저에서, \n동일한 사용자 경험(같은 화면, 같은 동작 등)을 줄 수 있도록 제작하는 기술, 방법. 2~3년 전…","fields":{"slug":"/web/web-standards-and-browser/"},"frontmatter":{"categories":"WEB","title":"웹 표준과 브라우저","date":"2022.03.07"}},"next":{"fields":{"slug":"/web/web-application-operation-principle/"}},"previous":{"fields":{"slug":"/web/web-image/"}}},{"node":{"id":"452c80de-d0fc-526b-8236-ef86d41b275b","excerpt":"💙 웹 애플리케이션의 동작 원리 브라우저를 통해서 접속할 수 있는 사이트들은 기본적으로 이러한 구조로 동작한다. 1. 최초 요청 (Request) 사용자가 자신의 컴퓨터에서 브라우저를 통해 주소창에 프로토콜과 사이트 주소를 입력함으로써\n해당하는 사이트의 주소에 맞는 서버로 최초로 요청을 한다.  통신 프로토콜 (Communication Protocol, 통신 규약)\n컴퓨터나 원거리 통신 장비 사이에서 메시지를 주고 받는 양식 및 규칙의 체계\n(HTTP, HTTPS, FTP, SSL 등) 2. 최초 응답 (Response) 요청을 받은 서버에서는 요청이 들어온 사용자의 브라우저로 최초로 응답을 한다.\n기본적인 웹 사이트의 구조를 담고 있는 HTML 파일을 사용자에게 보낸다. 3. 추가 요청 HTML 파일을 전달받아 화면에 보여질 기본적인 구조들을 확인할 수 있다.\nHTML 파일에는 그 구조에 맞게 추가적으로 작성되어져 있는 CSS, JS, 이미지 파일들이 명시되어져 있으며\n이러한 파…","fields":{"slug":"/web/web-application-operation-principle/"},"frontmatter":{"categories":"WEB","title":"웹 애플리케이션의 동작 원리","date":"2022.03.06"}},"next":{"fields":{"slug":"/web/front-end-development/"}},"previous":{"fields":{"slug":"/web/web-standards-and-browser/"}}},{"node":{"id":"f6aaa762-bf07-553f-9187-5df811627e3e","excerpt":"💙 프론트엔드 개발 (Front-End Development) HTML, CSS, JS 를 사용해 데이터를 그래픽 사용자 인터페이스(GUI) 로 변환하고, \n그것으로 사용자와 상호작용할 수 있도록 하는 것. 사용자는 자신의 컴퓨터에서 웹페이지를 볼 수 있게 도와주는 프로그램(브라우저) 를 통해서 \n특정 사이트에 접속하고 그 사이트를 보게 된다. 1. 프론트엔드 / 앞단 (Front-End) 사용자에게 직접 보여지는 웹 사이트를 개발하는 것을 말한다. 2. 백엔드 / 뒷단 (Back-End) 보안을 요구하는 데이터들이나 비즈니스 로직을 개발하는 것을 말한다.\n앞단에서 보여지는 내용들을 가공하고 저장한다. 비즈니스 로직 (Buisness Logic)\n사이트가 동작하는데 필요한, 핵심 데이터 처리를 수행하는 알고리즘 등을 말한다. 3. 풀스택 (Full-stack) GUI 프론트엔드부터, 데이터베이스 백엔드 등 모든 소프트웨어 스택을 개발하는 것을 말한다. 💙 프론트엔드 개발의 줄기 웹…","fields":{"slug":"/web/front-end-development/"},"frontmatter":{"categories":"WEB","title":"프론트엔드 개발","date":"2022.03.05"}},"next":{"fields":{"slug":"/blog/2022-03-05/"}},"previous":{"fields":{"slug":"/web/web-application-operation-principle/"}}},{"node":{"id":"856f8d21-81e9-52ad-b5ad-24ad97cbc702","excerpt":"💙 내가 블로그를 시작하게 된 이유는… 매일 공부하는 것들을 꾸준히 함으로써 내가 이해한 내용을 다른 사람에게 하는 가장 좋은 방법을 찾고 믿을 수 있는 정보인지 한번 더 하는, 한 단계 하는 개발자가 되기 위해서 만들었다. 이미 알고 있는 내용부터 새로 배운 내용까지\n차곡차곡 기록하고 꼭꼭 씹어먹자!\n… 체하면 안되니까 🥲 일단 한번 해보고, 될 때까지 반복하는\n무한루프 개발일기 시작! 💙 내가 블로그를 시작하게 된 이유는…","fields":{"slug":"/blog/2022-03-05/"},"frontmatter":{"categories":"BLOG","title":"블로그 시작!","date":"2022.03.05"}},"next":{"fields":{"slug":"/sample/"}},"previous":{"fields":{"slug":"/web/front-end-development/"}}},{"node":{"id":"360ce86b-a4d0-5e39-a6ed-7638d350566e","excerpt":"","fields":{"slug":"/sample/"},"frontmatter":{"categories":"BLOG","title":"SAMPLE","date":"2022.03.05"}},"next":null,"previous":{"fields":{"slug":"/blog/2022-03-05/"}}}],"categories":["All","WEB","JS","CSS","TOOL","BLOG"]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}